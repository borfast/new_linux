- name: Set up a new Linux Mint or Ubuntu system.
  hosts: localhost
  connection: local

  vars:
    codename: jammy
    homedir: "{{ ansible_env.HOME }}"
    bin: "{{ homedir }}/bin"
    progsdir: "{{ homedir }}/progs"
    tempdir: ./temp
    aptkeysdir: /etc/apt/keyrings
    repos:
      - ppa:inkscape.dev/stable
      - ppa:qbittorrent-team/qbittorrent-stable
      - ppa:git-core/ppa
      - "deb [arch=amd64 signed-by={{ aptkeysdir }}/google_cloud.gpg.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
      - "deb [arch=amd64 signed-by={{ aptkeysdir }}/docker.gpg.gpg] https://download.docker.com/linux/ubuntu {{ codename }} stable"
      - "deb [arch=amd64 signed-by={{ aptkeysdir }}/ngrok.asc.gpg] https://ngrok-agent.s3.amazonaws.com buster main"
      - "deb [arch=amd64 signed-by={{ aptkeysdir }}/brave.gpg.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main"
    signing_keys:
      google_cloud.gpg:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      docker.gpg:
        url: https://download.docker.com/linux/ubuntu/gpg
      ngrok.asc:
        url: https://ngrok-agent.s3.amazonaws.com/ngrok.asc
      brave.gpg:
        url: https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg


  tasks:

    - name: Create $HOME/bin if it does not exist
      ansible.builtin.file:
        path: "{{ bin }}"
        state: directory
        mode: "u+rwx"

    - name: Create $HOME/progs if it does not exist
      ansible.builtin.file:
        path: "{{ progsdir }}"
        state: directory
        mode: "u+rwx"

    - name: Add $HOME/bin to $PATH.
      ansible.builtin.lineinfile:
        path: "{{ homedir }}/.pam_environment"
        state: present
        line: "PATH DEFAULT=${PATH}:{{ bin }}"
        create: true
        mode: "u+rwx"

    - name: Add $HOME/.local/bin to $PATH.
      ansible.builtin.lineinfile:
        path: "{{ homedir }}/.pam_environment"
        state: present
        line: "PATH DEFAULT=${PATH}:/home/@{PAM_USER}/.local/bin"
        create: true
        mode: "u+rwx"

    - name: Add deb packages repositories
      block:
        - name: Download extra APT signing keys
          ansible.builtin.get_url:
            url: "{{ item.value.url }}"
            dest: "{{ aptkeysdir }}/{{ item.key }}"
          loop: "{{ lookup('ansible.builtin.dict', signing_keys) }}"

        - name: De-Armor APT signing keys
          ansible.builtin.shell:
            cmd: "gpg --dearmor < {{ aptkeysdir }}/{{ item.key }} > {{ aptkeysdir }}/{{ item.key }}.gpg"
          args:
            creates: "{{ aptkeysdir }}/{{ item.key }}.gpg"
          loop: "{{ lookup('ansible.builtin.dict', signing_keys) }}"


        - name: Add extra APT repositories
          ansible.builtin.apt_repository:
            repo: "{{ item }}"
            codename: "{{ codename }}"
            state: present
            update_cache: false
          loop: "{{ repos }}"
      become: true

    - name: Update all packages to their latest version
      ansible.builtin.apt:
        name: "*"
        state: latest
        update_cache: true
      become: true

    - name: Include list of packages
      ansible.builtin.include_vars:
        file: packages.yml
        name: package_list

    - name: Install .deb packages
      ansible.builtin.apt:
        name: "{{ package_list.deb }}"
        state: latest
        update_cache: true
      become: true

    - name: Add the flathub flatpak repository remote
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo

    - name: Install Flatpak packages
      community.general.flatpak:
        name: "{{ package_list.flatpak }}"
        state: present

    #########################################
    # From here on we install and configure #
    # stuff that requires special steps.    #
    #########################################

    - name: Create temporary directory to store downloaded files
      ansible.builtin.file:
        path: "{{ tempdir }}"
        state: directory
        mode: "u+rwx"

    - name: libdvd-pkg needs dpkg-reconfigure
      ansible.builtin.command:
        cmd: dpkg-reconfigure -f noninteractive libdvd-pkg
      register: result
      become: true
      changed_when:
        - '"is already installed." not it result.stdout'

    - name: Ensure fonts directory exists for Nerd fonts
      file:
        path: "{{ homedir }}/.fonts"
        state: directory
        mode: "u+rwx"

    - name: Get the URL for the latest version of JetBrains Mono Nerd Fonts
      uri:
        url: https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest
        return_content: true
      register: jetbrains_data

    - name: Install Jetbrains Mono Nerd Fonts
      ansible.builtin.unarchive:
        src: "{{ jetbrains_data.json | community.general.json_query(data_query) }}"
        remote_src: true
        dest: "{{ homedir }}/.fonts"
      vars:
        data_query: "assets[?ends_with(browser_download_url, 'JetBrainsMono.zip')].browser_download_url"

    - name: Clone fzf fuzzy finder
      ansible.builtin.git:
        repo: https://github.com/junegunn/fzf.git
        version: "master"
        single_branch: true
        depth: 1
        dest: "{{ homedir }}/.fzf"

    ##############################
    # Hugo static site generator #
    ##############################
    - name: Get the URL for the latest version of Hugo from Github
      ansible.builtin.uri:
        url: https://api.github.com/repos/gohugoio/hugo/releases/latest
        return_content: true
      register: hugo_data

    - name: Install the latest version of Hugo from the temporary file
      ansible.builtin.apt:
        deb: "{{ hugo_data.json | community.general.json_query(data_query) }}"
      become: true
      vars:
        data_query: "assets[?ends_with(browser_download_url, 'linux-amd64.deb')]
          | [?contains(browser_download_url, 'extended')].browser_download_url"

    ################
    # Python stuff #
    ################
    - name: Install pipx
      pip:
        name: pipx
        extra_args: --user

    - name: Download pyenv installer (will be executed later)
      get_url:
        url: https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer
        dest: "{{ tempdir }}/pyenv-installer"
        mode: u+rwx

    - name: Download Poetry installer (will be executed later)
      get_url:
        url: https://install.python-poetry.org
        dest: "{{ tempdir }}/install-poetry.py"
        mode: u+rwx

    - name: Add Python stuff to .zshrc
      blockinfile:
        path: "{{ homedir }}/.zshrc"
        block: |
          export PATH="{{ homedir }}/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"

    #############
    # Syncthing #
    #############
    - name: Get the URL for the latest version of Syncthing from Github
      ansible.builtin.uri:
        url: https://api.github.com/repos/syncthing/syncthing/releases/latest
        return_content: true
      register: syncthing_data

    - name: Download Syncthing
      ansible.builtin.unarchive:
        src: "{{ syncthing_data.json | community.general.json_query(data_query) }}"
        remote_src: true
        dest: "{{ progsdir }}/syncthing"
      vars:
        data_query: "assets[?contains(browser_download_url, 'syncthing-linux-amd64')].browser_download_url"


    ######################################################
    # kubectx - kubectl is installed via package manager #
    ######################################################
    - name: Get the URL for the latest version of kubectx from Github
      ansible.builtin.uri:
        url: https://api.github.com/repos/ahmetb/kubectx/releases/latest
        return_content: true
      register: kubectx_data

    - name: Download kubectx
      ansible.builtin.unarchive:
        src: "{{ kubectx_data.json | community.general.json_query(data_query) }}"
        remote_src: true
        dest: "{{ bin }}/kubectx"
      vars:
        data_query: "assets[?contains(browser_download_url, 'kubectx_v')]
          | [?ends_with(browser_download_url, '_linux_x86_64.tar.gz')].browser_download_url"

    #####################################################
    # kubens - kubectl is installed via package manager #
    #####################################################
    - name: Get the URL for the latest version of kubens from Github
      ansible.builtin.uri:
        url: https://api.github.com/repos/ahmetb/kubectx/releases/latest
        return_content: true
      register: kubens_data

    - name: Download kubens
      ansible.builtin.unarchive:
        src: "{{ kubens_data.json | community.general.json_query(data_query) }}"
        remote_src: true
        dest: "{{ bin }}/kubens"
      vars:
        data_query: "assets[?contains(browser_download_url, 'kubens_v')]
          | [?ends_with(browser_download_url, '_linux_x86_64.tar.gz')].browser_download_url"

    #######
    # k9s #
    #######
    - name: Get the URL for the latest version of k9s from Github
      ansible.builtin.uri:
        url: https://api.github.com/repos/derailed/k9s/releases/latest
        return_content: true
      register: k9s_data

    - name: Download k9s
      ansible.builtin.unarchive:
        src: "{{ k9s_data.json | community.general.json_query(data_query) }}"
        remote_src: true
        dest: "{{ bin }}/k9s"
      vars:
        data_query: "assets[?contains(browser_download_url, 'kubens_v')]
          | [?ends_with(browser_download_url, 'k9s_Linux_x86_64.tar.gz')].browser_download_url"


    ########
    # Helm #
    ########
    - name: Download Helm to a temporary file
      ansible.builtin.unarchive:
        src: "https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz"
        remote_src: true
        include: "linux-amd64/helm"
        dest: "{{ bin }}/helm"


    ###########
    # Lazygit #
    ###########
    - name: Get the URL for the latest version of lazygit from Github
      ansible.builtin.uri:
        url: https://api.github.com/repos/jesseduffield/lazygit/releases/latest
        return_content: true
      register: lazygit_data

    - name: Extract lazygit into temporary directory
      ansible.builtin.unarchive:
        src: "{{ lazygit_data.json | community.general.json_query(data_query) }}"
        include: "lazygit"
        dest: "{{ bin }}/lazygit"
      vars:
        data_query: "assets[?ends_with(browser_download_url, '_Linux_x86_64.tar.gz')].browser_download_url"

    ###########
    # Keybase #
    ###########
    - name: Install Keybase
      ansible.builtin.apt:
        deb: https://prerelease.keybase.io/keybase_amd64.deb
      become: true

    ######################
    # Visual Studio Code #
    ######################
    - name: Install Visual Studio Code
      ansible.builtin.apt:
        deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64
      become: true

    #################
    # Final cleanup #
    #################
    - name: Remove packages not needed anymore
      ansible.builtin.apt:
        autoremove: true
      become: true
